var _hannemathisen$elm_test_project$Draw_State$mapXPoints = F2(
	function (xList, yList) {
		var _p0 = xList;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Draw.State',
				{
					start: {line: 299, column: 3},
					end: {line: 311, column: 35}
				},
				_p0)('Empty list');
		} else {
			if (_p0._1.ctor === '[]') {
				return A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					{
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					},
					yList);
			} else {
				var mappedList = A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					{
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					},
					yList);
				return A2(
					_elm_lang$core$List$append,
					mappedList,
					A2(_hannemathisen$elm_test_project$Draw_State$mapXPoints, _p0._1, yList));
			}
		}
	});
var _hannemathisen$elm_test_project$Draw_State$mapYPoints = F2(
	function (xList, yList) {
		var _p2 = yList;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Draw.State',
				{
					start: {line: 316, column: 3},
					end: {line: 328, column: 35}
				},
				_p2)('Empty list');
		} else {
			if (_p2._1.ctor === '[]') {
				return A2(
					_hannemathisen$elm_test_project$Draw_State$mapXPoints,
					xList,
					{
						ctor: '::',
						_0: _p2._0,
						_1: {ctor: '[]'}
					});
			} else {
				var mappedList = A2(
					_hannemathisen$elm_test_project$Draw_State$mapXPoints,
					xList,
					{
						ctor: '::',
						_0: _p2._0,
						_1: {ctor: '[]'}
					});
				return A2(
					_elm_lang$core$List$append,
					mappedList,
					A2(_hannemathisen$elm_test_project$Draw_State$mapYPoints, xList, _p2._1));
			}
		}
	});
var _hannemathisen$elm_test_project$Draw_State$splitAndRemove = F2(
	function (allPoints, point) {
		var _p4 = allPoints;
		if (_p4.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Draw.State',
				{
					start: {line: 261, column: 3},
					end: {line: 294, column: 69}
				},
				_p4)('Empty list');
		} else {
			if (_p4._1.ctor === '[]') {
				var _p8 = _p4._0;
				var index = A2(_hannemathisen$elm_test_project$List_Extra$elemIndex, point, _p8);
				var _p6 = index;
				if (_p6.ctor === 'Nothing') {
					return {
						ctor: '::',
						_0: _p8,
						_1: {ctor: '[]'}
					};
				} else {
					var _p7 = _p6._0;
					var list2 = A2(_elm_lang$core$List$drop, _p7, _p8);
					var list1 = A2(_elm_lang$core$List$take, _p7 - 1, _p8);
					return _elm_lang$core$List$isEmpty(list1) ? {
						ctor: '::',
						_0: list2,
						_1: {ctor: '[]'}
					} : {
						ctor: '::',
						_0: list1,
						_1: {
							ctor: '::',
							_0: list2,
							_1: {ctor: '[]'}
						}
					};
				}
			} else {
				var _p12 = _p4._1;
				var _p11 = _p4._0;
				var index = A2(_hannemathisen$elm_test_project$List_Extra$elemIndex, point, _p11);
				var _p9 = index;
				if (_p9.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: _p11,
							_1: {ctor: '[]'}
						},
						A2(_hannemathisen$elm_test_project$Draw_State$splitAndRemove, _p12, point));
				} else {
					var _p10 = _p9._0;
					var list2 = A2(_elm_lang$core$List$drop, _p10, _p11);
					var list1 = A2(_elm_lang$core$List$take, _p10 - 1, _p11);
					return _elm_lang$core$List$isEmpty(list1) ? A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: list2,
							_1: {ctor: '[]'}
						},
						A2(_hannemathisen$elm_test_project$Draw_State$splitAndRemove, _p12, point)) : A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: list1,
							_1: {
								ctor: '::',
								_0: list2,
								_1: {ctor: '[]'}
							}
						},
						A2(_hannemathisen$elm_test_project$Draw_State$splitAndRemove, _p12, point));
				}
			}
		}
	});
var _hannemathisen$elm_test_project$Draw_State$removePoints = F2(
	function (allPoints, erasedPoints) {
		removePoints:
		while (true) {
			var _p13 = erasedPoints;
			if (_p13.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Draw.State',
					{
						start: {line: 245, column: 3},
						end: {line: 256, column: 57}
					},
					_p13)('Empty list');
			} else {
				if (_p13._1.ctor === '[]') {
					var point = _hannemathisen$elm_test_project$Canvas_Point$fromFloats(_p13._0);
					return A2(_hannemathisen$elm_test_project$Draw_State$splitAndRemove, allPoints, point);
				} else {
					var point = _hannemathisen$elm_test_project$Canvas_Point$fromFloats(_p13._0);
					var _v6 = A2(_hannemathisen$elm_test_project$Draw_State$splitAndRemove, allPoints, point),
						_v7 = _p13._1;
					allPoints = _v6;
					erasedPoints = _v7;
					continue removePoints;
				}
			}
		}
	});
var _hannemathisen$elm_test_project$Draw_State$erase = F2(
	function (point, oldPoints) {
		var _p15 = _hannemathisen$elm_test_project$Canvas_Point$toInts(point);
		var x = _p15._0;
		var y = _p15._1;
		var xPoints = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toFloat,
			A2(_elm_lang$core$List$range, x - 7, x + 7));
		var yPoints = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toFloat,
			A2(_elm_lang$core$List$range, y - 7, y + 7));
		var points = A2(_hannemathisen$elm_test_project$Draw_State$mapYPoints, xPoints, yPoints);
		return A2(_hannemathisen$elm_test_project$Draw_State$removePoints, oldPoints, points);
	});
var _hannemathisen$elm_test_project$Draw_State$concatDrawOps = function (drawOps) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
			_1: {
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$LineWidth(3),
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(_elm_lang$core$Color$red),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineCap('round'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$Stroke,
				_1: {ctor: '[]'}
			}));
};
var _hannemathisen$elm_test_project$Draw_State$pointDataToLineOperations = function (points) {
	var _p16 = points;
	if (_p16.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$MoveTo(_p16._0),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (point) {
					return _hannemathisen$elm_test_project$Canvas$LineTo(point);
				},
				_p16._1));
	}
};
var _hannemathisen$elm_test_project$Draw_State$update = F2(
	function (msg, model) {
		var _p17 = msg;
		switch (_p17.ctor) {
			case 'MouseDown':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{draw: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseUp':
				var _p18 = model.mode;
				if (_p18.ctor === 'Draw') {
					var newCurrentPointData = {ctor: '[]'};
					var drawData = model.drawData;
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{
							allPointData: {ctor: '::', _0: model.drawData.currentPointData, _1: model.drawData.allPointData},
							currentPointData: newCurrentPointData
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: false, drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: false}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'MouseMove':
				var _p21 = _p17._0;
				var _p19 = model.mode;
				if (_p19.ctor === 'Draw') {
					var _p20 = model.draw;
					if (_p20 === true) {
						var newPointData = A2(
							_elm_lang$core$Basics_ops['++'],
							model.drawData.currentPointData,
							{
								ctor: '::',
								_0: _p21,
								_1: {ctor: '[]'}
							});
						var lineDrawOps = _elm_lang$core$List$concat(
							A2(
								_elm_lang$core$List$map,
								function (newPointData) {
									return _hannemathisen$elm_test_project$Draw_State$pointDataToLineOperations(newPointData);
								},
								{ctor: '::', _0: newPointData, _1: model.drawData.allPointData}));
						var newDrawOps = _hannemathisen$elm_test_project$Draw_State$concatDrawOps(lineDrawOps);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									drawData: {currentPointData: newPointData, drawOps: newDrawOps, allPointData: model.drawData.allPointData}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					var drawData = model.drawData;
					var newPoints = A2(_hannemathisen$elm_test_project$Draw_State$erase, _p21, drawData.allPointData);
					var lineDrawOps = _elm_lang$core$List$concat(
						A2(
							_elm_lang$core$List$map,
							function (newPoints) {
								return _hannemathisen$elm_test_project$Draw_State$pointDataToLineOperations(newPoints);
							},
							newPoints));
					var newDrawOps = _hannemathisen$elm_test_project$Draw_State$concatDrawOps(lineDrawOps);
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{allPointData: newPoints, drawOps: newDrawOps});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TouchDown':
				var _p22 = _p17._0.points;
				if (_p22.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var newCurrentPointData = A2(
						_elm_lang$core$Debug$log,
						'newCurrentPointData',
						{ctor: '[]'});
					var drawData = model.drawData;
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{
							allPointData: A2(
								_elm_lang$core$Basics_ops['++'],
								model.drawData.allPointData,
								{
									ctor: '::',
									_0: model.drawData.currentPointData,
									_1: {ctor: '[]'}
								}),
							currentPointData: newCurrentPointData
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: true, drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TouchUp':
				var _p23 = _p17._0.points;
				if (_p23.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (_p23._1.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'TouchMove':
				var _p24 = _p17._0.points;
				if (_p24.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (_p24._1.ctor === '[]') {
						var _p26 = _p24._0;
						var _p25 = model.mode;
						if (_p25.ctor === 'Draw') {
							var newPointData = A2(
								_elm_lang$core$Basics_ops['++'],
								model.drawData.currentPointData,
								{
									ctor: '::',
									_0: _p26,
									_1: {ctor: '[]'}
								});
							var lineDrawOps = _elm_lang$core$List$concat(
								A2(
									_elm_lang$core$List$map,
									function (newPointData) {
										return _hannemathisen$elm_test_project$Draw_State$pointDataToLineOperations(newPointData);
									},
									{ctor: '::', _0: newPointData, _1: model.drawData.allPointData}));
							var newDrawOps = _hannemathisen$elm_test_project$Draw_State$concatDrawOps(lineDrawOps);
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										drawData: {currentPointData: newPointData, drawOps: newDrawOps, allPointData: model.drawData.allPointData}
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							var drawData = model.drawData;
							var newPoints = A2(_hannemathisen$elm_test_project$Draw_State$erase, _p26, drawData.allPointData);
							var lineDrawOps = _elm_lang$core$List$concat(
								A2(
									_elm_lang$core$List$map,
									function (newPoints) {
										return _hannemathisen$elm_test_project$Draw_State$pointDataToLineOperations(newPoints);
									},
									newPoints));
							var newDrawOps = _hannemathisen$elm_test_project$Draw_State$concatDrawOps(lineDrawOps);
							var newDrawData = _elm_lang$core$Native_Utils.update(
								drawData,
								{allPointData: newPoints, drawOps: newDrawOps});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{drawData: newDrawData}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			default:
				var _p27 = model.mode;
				if (_p27.ctor === 'Draw') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$Draw_Types$Erase}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$Draw_Types$Draw}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _hannemathisen$elm_test_project$Draw_State$init = function () {
	var model = {mode: _hannemathisen$elm_test_project$Draw_Types$Draw, drawData: _hannemathisen$elm_test_project$Draw_Types$initDrawData, draw: false, image: _hannemathisen$elm_test_project$Draw_Types$Loading};
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
}();
