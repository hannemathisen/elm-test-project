var _hannemathisen$elm_test_project$Main$drawCanvas = F2(
	function (drawOps, canvas) {
		var drawOpsWithBorder = A2(
			_elm_lang$core$List$append,
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(
						A3(_elm_lang$core$Color$rgb, 255, 0, 0)),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineWidth(2.0),
						_1: {
							ctor: '::',
							_0: A2(
								_hannemathisen$elm_test_project$Canvas$Rect,
								_hannemathisen$elm_test_project$Canvas_Point$fromInts(
									{ctor: '_Tuple2', _0: 0, _1: 0}),
								A2(_hannemathisen$elm_test_project$Canvas$Size, 200, 200)),
							_1: {
								ctor: '::',
								_0: _hannemathisen$elm_test_project$Canvas$Stroke,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var _p0 = _hannemathisen$elm_test_project$Canvas$getSize(canvas);
		var width = _p0.width;
		var height = _p0.height;
		return A2(_hannemathisen$elm_test_project$Canvas$batch, drawOpsWithBorder, canvas);
	});
var _hannemathisen$elm_test_project$Main$presentIfReady = function (model) {
	var _p1 = model;
	if (_p1.ctor === 'Loading') {
		return A2(
			_elm_lang$html$Html$p,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('loading...'),
				_1: {ctor: '[]'}
			});
	} else {
		return A2(
			_hannemathisen$elm_test_project$Canvas$toHtml,
			{ctor: '[]'},
			A2(_hannemathisen$elm_test_project$Main$drawCanvas, _p1._1, _p1._0));
	}
};
var _hannemathisen$elm_test_project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _hannemathisen$elm_test_project$Main$presentIfReady(model),
			_1: {ctor: '[]'}
		});
};
var _hannemathisen$elm_test_project$Main$ImageLoaded = function (a) {
	return {ctor: 'ImageLoaded', _0: a};
};
var _hannemathisen$elm_test_project$Main$loadImage = A2(
	_elm_lang$core$Task$attempt,
	_hannemathisen$elm_test_project$Main$ImageLoaded,
	_hannemathisen$elm_test_project$Canvas$loadImage('./cat.jpg'));
var _hannemathisen$elm_test_project$Main$Loading = {ctor: 'Loading'};
var _hannemathisen$elm_test_project$Main$GotCanvas = F2(
	function (a, b) {
		return {ctor: 'GotCanvas', _0: a, _1: b};
	});
var _hannemathisen$elm_test_project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		var _p3 = _elm_lang$core$Result$toMaybe(_p2._0);
		if (_p3.ctor === 'Just') {
			return {
				ctor: '_Tuple2',
				_0: A2(
					_hannemathisen$elm_test_project$Main$GotCanvas,
					_p3._0,
					{ctor: '[]'}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {ctor: '_Tuple2', _0: _hannemathisen$elm_test_project$Main$Loading, _1: _hannemathisen$elm_test_project$Main$loadImage};
		}
	});
var _hannemathisen$elm_test_project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _hannemathisen$elm_test_project$Main$Loading, _1: _hannemathisen$elm_test_project$Main$loadImage},
		view: _hannemathisen$elm_test_project$Main$view,
		update: _hannemathisen$elm_test_project$Main$update,
		subscriptions: _elm_lang$core$Basics$always(_elm_lang$core$Platform_Sub$none)
	})();
