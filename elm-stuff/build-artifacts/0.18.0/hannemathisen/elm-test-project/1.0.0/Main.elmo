var _hannemathisen$elm_test_project$Main$drawCanvas = F2(
	function (drawOps, canvas) {
		var drawOpsWithBorder = A2(
			_elm_lang$core$List$append,
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(
						A3(_elm_lang$core$Color$rgb, 255, 0, 0)),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineWidth(2.0),
						_1: {
							ctor: '::',
							_0: A2(
								_hannemathisen$elm_test_project$Canvas$Rect,
								_hannemathisen$elm_test_project$Canvas_Point$fromInts(
									{ctor: '_Tuple2', _0: 0, _1: 0}),
								A2(_hannemathisen$elm_test_project$Canvas$Size, 800, 600)),
							_1: {
								ctor: '::',
								_0: _hannemathisen$elm_test_project$Canvas$Stroke,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var _p0 = _hannemathisen$elm_test_project$Canvas$getSize(canvas);
		var width = _p0.width;
		var height = _p0.height;
		return A2(_hannemathisen$elm_test_project$Canvas$batch, drawOpsWithBorder, canvas);
	});
var _hannemathisen$elm_test_project$Main$presentIfReady = function (model) {
	var _p1 = model.mode;
	switch (_p1.ctor) {
		case 'Loading':
			return A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Loading image...'),
					_1: {ctor: '[]'}
				});
		case 'DrawMode':
			return A2(
				_hannemathisen$elm_test_project$Canvas$toHtml,
				{
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseDown(_hannemathisen$elm_test_project$Types$MouseDown),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseUp(_hannemathisen$elm_test_project$Types$MouseUp),
						_1: {
							ctor: '::',
							_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseMove(_hannemathisen$elm_test_project$Types$MouseMove),
							_1: {ctor: '[]'}
						}
					}
				},
				A2(_hannemathisen$elm_test_project$Main$drawCanvas, model.drawData.drawOps, _p1._0));
		default:
			return A2(
				_hannemathisen$elm_test_project$Canvas$toHtml,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('eraser'),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseDown(_hannemathisen$elm_test_project$Types$MouseDown),
						_1: {
							ctor: '::',
							_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseUp(_hannemathisen$elm_test_project$Types$MouseUp),
							_1: {
								ctor: '::',
								_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseMove(_hannemathisen$elm_test_project$Types$MouseMove),
								_1: {ctor: '[]'}
							}
						}
					}
				},
				A2(_hannemathisen$elm_test_project$Main$drawCanvas, model.drawData.drawOps, _p1._0));
	}
};
var _hannemathisen$elm_test_project$Main$view = function (model) {
	var _p2 = model.mode;
	switch (_p2.ctor) {
		case 'Loading':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Main$presentIfReady(model),
					_1: {ctor: '[]'}
				});
		case 'DrawMode':
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _hannemathisen$elm_test_project$Main$presentIfReady(model),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('btn'),
										_1: {
											ctor: '::',
											_0: _hannemathisen$elm_test_project$Canvas_Events$onClick(_hannemathisen$elm_test_project$Types$EraseClicked),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Erase is off'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _hannemathisen$elm_test_project$Main$presentIfReady(model),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('btn'),
										_1: {
											ctor: '::',
											_0: _hannemathisen$elm_test_project$Canvas_Events$onClick(_hannemathisen$elm_test_project$Types$EraseClicked),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Erase is on'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				});
	}
};
var _hannemathisen$elm_test_project$Main$mapXPoints = F2(
	function (xList, yList) {
		var _p3 = xList;
		if (_p3.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Main',
				{
					start: {line: 322, column: 3},
					end: {line: 334, column: 35}
				},
				_p3)('Empty list');
		} else {
			if (_p3._1.ctor === '[]') {
				return A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					},
					yList);
			} else {
				var mappedList = A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					{
						ctor: '::',
						_0: _p3._0,
						_1: {ctor: '[]'}
					},
					yList);
				return A2(
					_elm_lang$core$List$append,
					mappedList,
					A2(_hannemathisen$elm_test_project$Main$mapXPoints, _p3._1, yList));
			}
		}
	});
var _hannemathisen$elm_test_project$Main$mapYPoints = F2(
	function (xList, yList) {
		var _p5 = yList;
		if (_p5.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'Main',
				{
					start: {line: 339, column: 3},
					end: {line: 351, column: 35}
				},
				_p5)('Empty list');
		} else {
			if (_p5._1.ctor === '[]') {
				return A2(
					_hannemathisen$elm_test_project$Main$mapXPoints,
					xList,
					{
						ctor: '::',
						_0: _p5._0,
						_1: {ctor: '[]'}
					});
			} else {
				var mappedList = A2(
					_hannemathisen$elm_test_project$Main$mapXPoints,
					xList,
					{
						ctor: '::',
						_0: _p5._0,
						_1: {ctor: '[]'}
					});
				return A2(
					_elm_lang$core$List$append,
					mappedList,
					A2(_hannemathisen$elm_test_project$Main$mapYPoints, xList, _p5._1));
			}
		}
	});
var _hannemathisen$elm_test_project$Main$removePoints = F2(
	function (drawOps, points) {
		removePoints:
		while (true) {
			var _p7 = points;
			if (_p7.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'Main',
					{
						start: {line: 300, column: 3},
						end: {line: 316, column: 37}
					},
					_p7)('Empty list');
			} else {
				if (_p7._1.ctor === '[]') {
					var point = _hannemathisen$elm_test_project$Canvas_Point$fromFloats(_p7._0);
					return A3(
						_hannemathisen$elm_test_project$List_Extra$replaceIf,
						function (x) {
							return _elm_lang$core$Native_Utils.eq(
								x,
								_hannemathisen$elm_test_project$Canvas$LineTo(point));
						},
						_hannemathisen$elm_test_project$Canvas$MoveTo(point),
						drawOps);
				} else {
					var point = _hannemathisen$elm_test_project$Canvas_Point$fromFloats(_p7._0);
					var newDrawOps = A3(
						_hannemathisen$elm_test_project$List_Extra$replaceIf,
						function (x) {
							return _elm_lang$core$Native_Utils.eq(
								x,
								_hannemathisen$elm_test_project$Canvas$LineTo(point));
						},
						_hannemathisen$elm_test_project$Canvas$MoveTo(point),
						drawOps);
					var _v5 = newDrawOps,
						_v6 = _p7._1;
					drawOps = _v5;
					points = _v6;
					continue removePoints;
				}
			}
		}
	});
var _hannemathisen$elm_test_project$Main$erase = F2(
	function (point, drawOps) {
		var _p9 = _hannemathisen$elm_test_project$Canvas_Point$toInts(point);
		var x = _p9._0;
		var y = _p9._1;
		var xPoints = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toFloat,
			A2(_elm_lang$core$List$range, x - 3, x + 3));
		var yPoints = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toFloat,
			A2(_elm_lang$core$List$range, y - 3, y + 3));
		var points = A2(_hannemathisen$elm_test_project$Main$mapYPoints, xPoints, yPoints);
		return A2(_hannemathisen$elm_test_project$Main$removePoints, drawOps, points);
	});
var _hannemathisen$elm_test_project$Main$draw = F3(
	function (point, canvas, drawOps) {
		return A2(
			_elm_lang$core$List$append,
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$LineTo(point),
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$Stroke,
					_1: {ctor: '[]'}
				}
			});
	});
var _hannemathisen$elm_test_project$Main$concatDrawOps = function (drawOps) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
			_1: {
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$LineWidth(3),
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(_elm_lang$core$Color$red),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineCap('round'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$Stroke,
				_1: {ctor: '[]'}
			}));
};
var _hannemathisen$elm_test_project$Main$pointDataToLineOperations = function (pointData) {
	var _p10 = pointData.points;
	if (_p10.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$MoveTo(_p10._0),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (point) {
					return _hannemathisen$elm_test_project$Canvas$LineTo(point);
				},
				_p10._1));
	}
};
var _hannemathisen$elm_test_project$Main$loadImage = A2(
	_elm_lang$core$Task$attempt,
	_hannemathisen$elm_test_project$Types$ImageLoaded,
	_hannemathisen$elm_test_project$Canvas$loadImage('white.png'));
var _hannemathisen$elm_test_project$Main$update = F2(
	function (msg, model) {
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'ImageLoaded':
				var _p12 = _elm_lang$core$Result$toMaybe(_p11._0);
				if (_p12.ctor === 'Just') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								mode: _hannemathisen$elm_test_project$Types$DrawMode(_p12._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$Types$Loading}),
						_1: _hannemathisen$elm_test_project$Main$loadImage
					};
				}
			case 'MouseDown':
				var _p13 = model.mode;
				if (_p13.ctor === 'Loading') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$Types$Loading}),
						_1: _hannemathisen$elm_test_project$Main$loadImage
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: true}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'MouseUp':
				var newCurrentPointData = {
					position: model.drawData.currentPointData.position,
					points: {ctor: '[]'}
				};
				var drawData = model.drawData;
				var newDrawData = _elm_lang$core$Native_Utils.update(
					drawData,
					{
						allPointData: {ctor: '::', _0: model.drawData.currentPointData, _1: model.drawData.allPointData},
						currentPointData: newCurrentPointData
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{draw: false, drawData: newDrawData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseMove':
				var _p17 = _p11._0;
				var _p14 = model.mode;
				switch (_p14.ctor) {
					case 'Loading':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mode: _hannemathisen$elm_test_project$Types$Loading}),
							_1: _hannemathisen$elm_test_project$Main$loadImage
						};
					case 'DrawMode':
						var _p15 = model.draw;
						if (_p15 === true) {
							var pointData = model.drawData.currentPointData;
							var lineDrawOps = _elm_lang$core$List$concat(
								A2(
									_elm_lang$core$List$map,
									function (pointData) {
										return _hannemathisen$elm_test_project$Main$pointDataToLineOperations(pointData);
									},
									{ctor: '::', _0: pointData, _1: model.drawData.allPointData}));
							var newDrawOps = _hannemathisen$elm_test_project$Main$concatDrawOps(lineDrawOps);
							var newPoints = A2(
								_elm_lang$core$Basics_ops['++'],
								model.drawData.currentPointData.points,
								{
									ctor: '::',
									_0: _p17,
									_1: {ctor: '[]'}
								});
							var newPointData = _elm_lang$core$Native_Utils.update(
								pointData,
								{points: newPoints});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										drawData: {currentPointData: newPointData, drawOps: newDrawOps, allPointData: model.drawData.allPointData}
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
					default:
						var _p16 = model.draw;
						if (_p16 === true) {
							var drawData = model.drawData;
							var newDrawOps = A2(_hannemathisen$elm_test_project$Main$erase, _p17, drawData.drawOps);
							var newDrawData = _elm_lang$core$Native_Utils.update(
								drawData,
								{drawOps: newDrawOps});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{
										mode: _hannemathisen$elm_test_project$Types$EraseMode(_p14._0),
										drawData: newDrawData
									}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
						}
				}
			default:
				var _p18 = model.mode;
				switch (_p18.ctor) {
					case 'Loading':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{mode: _hannemathisen$elm_test_project$Types$Loading}),
							_1: _hannemathisen$elm_test_project$Main$loadImage
						};
					case 'DrawMode':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									mode: _hannemathisen$elm_test_project$Types$EraseMode(_p18._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									mode: _hannemathisen$elm_test_project$Types$DrawMode(_p18._0)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
				}
		}
	});
var _hannemathisen$elm_test_project$Main$init = function () {
	var model = {mode: _hannemathisen$elm_test_project$Types$Loading, drawData: _hannemathisen$elm_test_project$Types$initDrawData, draw: false};
	return {ctor: '_Tuple2', _0: model, _1: _hannemathisen$elm_test_project$Main$loadImage};
}();
var _hannemathisen$elm_test_project$Main$main = _elm_lang$html$Html$program(
	{
		init: _hannemathisen$elm_test_project$Main$init,
		view: _hannemathisen$elm_test_project$Main$view,
		update: _hannemathisen$elm_test_project$Main$update,
		subscriptions: _elm_lang$core$Basics$always(_elm_lang$core$Platform_Sub$none)
	})();
