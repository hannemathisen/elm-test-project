var _hannemathisen$elm_test_project$DrawErase_State$mapXPoints = F2(
	function (xList, yList) {
		var _p0 = xList;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'DrawErase.State',
				{
					start: {line: 478, column: 3},
					end: {line: 490, column: 35}
				},
				_p0)('Empty list');
		} else {
			if (_p0._1.ctor === '[]') {
				return A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					{
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					},
					yList);
			} else {
				var mappedList = A3(
					_elm_lang$core$List$map2,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					{
						ctor: '::',
						_0: _p0._0,
						_1: {ctor: '[]'}
					},
					yList);
				return A2(
					_elm_lang$core$List$append,
					mappedList,
					A2(_hannemathisen$elm_test_project$DrawErase_State$mapXPoints, _p0._1, yList));
			}
		}
	});
var _hannemathisen$elm_test_project$DrawErase_State$mapYPoints = F2(
	function (xList, yList) {
		var _p2 = yList;
		if (_p2.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'DrawErase.State',
				{
					start: {line: 495, column: 3},
					end: {line: 507, column: 35}
				},
				_p2)('Empty list');
		} else {
			if (_p2._1.ctor === '[]') {
				return A2(
					_hannemathisen$elm_test_project$DrawErase_State$mapXPoints,
					xList,
					{
						ctor: '::',
						_0: _p2._0,
						_1: {ctor: '[]'}
					});
			} else {
				var mappedList = A2(
					_hannemathisen$elm_test_project$DrawErase_State$mapXPoints,
					xList,
					{
						ctor: '::',
						_0: _p2._0,
						_1: {ctor: '[]'}
					});
				return A2(
					_elm_lang$core$List$append,
					mappedList,
					A2(_hannemathisen$elm_test_project$DrawErase_State$mapYPoints, xList, _p2._1));
			}
		}
	});
var _hannemathisen$elm_test_project$DrawErase_State$splitAndRemove = F2(
	function (drawnPoints, point) {
		var _p4 = drawnPoints;
		if (_p4.ctor === '[]') {
			return _elm_lang$core$Native_Utils.crashCase(
				'DrawErase.State',
				{
					start: {line: 440, column: 3},
					end: {line: 473, column: 69}
				},
				_p4)('Empty list');
		} else {
			if (_p4._1.ctor === '[]') {
				var _p8 = _p4._0;
				var index = A2(_hannemathisen$elm_test_project$List_Extra$elemIndex, point, _p8);
				var _p6 = index;
				if (_p6.ctor === 'Nothing') {
					return {
						ctor: '::',
						_0: _p8,
						_1: {ctor: '[]'}
					};
				} else {
					var _p7 = _p6._0;
					var list2 = A2(_elm_lang$core$List$drop, _p7, _p8);
					var list1 = A2(_elm_lang$core$List$take, _p7 - 1, _p8);
					return _elm_lang$core$List$isEmpty(list1) ? {
						ctor: '::',
						_0: list2,
						_1: {ctor: '[]'}
					} : {
						ctor: '::',
						_0: list1,
						_1: {
							ctor: '::',
							_0: list2,
							_1: {ctor: '[]'}
						}
					};
				}
			} else {
				var _p12 = _p4._1;
				var _p11 = _p4._0;
				var index = A2(_hannemathisen$elm_test_project$List_Extra$elemIndex, point, _p11);
				var _p9 = index;
				if (_p9.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: _p11,
							_1: {ctor: '[]'}
						},
						A2(_hannemathisen$elm_test_project$DrawErase_State$splitAndRemove, _p12, point));
				} else {
					var _p10 = _p9._0;
					var list2 = A2(_elm_lang$core$List$drop, _p10, _p11);
					var list1 = A2(_elm_lang$core$List$take, _p10 - 1, _p11);
					return _elm_lang$core$List$isEmpty(list1) ? A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: list2,
							_1: {ctor: '[]'}
						},
						A2(_hannemathisen$elm_test_project$DrawErase_State$splitAndRemove, _p12, point)) : A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: list1,
							_1: {
								ctor: '::',
								_0: list2,
								_1: {ctor: '[]'}
							}
						},
						A2(_hannemathisen$elm_test_project$DrawErase_State$splitAndRemove, _p12, point));
				}
			}
		}
	});
var _hannemathisen$elm_test_project$DrawErase_State$removePoints = F2(
	function (drawnPoints, pointsToErase) {
		removePoints:
		while (true) {
			var _p13 = pointsToErase;
			if (_p13.ctor === '[]') {
				return _elm_lang$core$Native_Utils.crashCase(
					'DrawErase.State',
					{
						start: {line: 424, column: 3},
						end: {line: 435, column: 59}
					},
					_p13)('Empty list');
			} else {
				if (_p13._1.ctor === '[]') {
					var point = _hannemathisen$elm_test_project$Canvas_Point$fromFloats(_p13._0);
					return A2(_hannemathisen$elm_test_project$DrawErase_State$splitAndRemove, drawnPoints, point);
				} else {
					var point = _hannemathisen$elm_test_project$Canvas_Point$fromFloats(_p13._0);
					var _v6 = A2(_hannemathisen$elm_test_project$DrawErase_State$splitAndRemove, drawnPoints, point),
						_v7 = _p13._1;
					drawnPoints = _v6;
					pointsToErase = _v7;
					continue removePoints;
				}
			}
		}
	});
var _hannemathisen$elm_test_project$DrawErase_State$erase = F2(
	function (point, drawnPoints) {
		var _p15 = _hannemathisen$elm_test_project$Canvas_Point$toInts(point);
		var x = _p15._0;
		var y = _p15._1;
		var xPoints = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toFloat,
			A2(_elm_lang$core$List$range, x - 7, x + 7));
		var yPoints = A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Basics$toFloat,
			A2(_elm_lang$core$List$range, y - 7, y + 7));
		var points = A2(_hannemathisen$elm_test_project$DrawErase_State$mapYPoints, xPoints, yPoints);
		return A2(_hannemathisen$elm_test_project$DrawErase_State$removePoints, drawnPoints, points);
	});
var _hannemathisen$elm_test_project$DrawErase_State$concatDrawOps = function (drawOps) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
			_1: {
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$LineWidth(3),
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(_elm_lang$core$Color$red),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineCap('round'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$Stroke,
				_1: {ctor: '[]'}
			}));
};
var _hannemathisen$elm_test_project$DrawErase_State$pointsToLineOperations = function (points) {
	var _p16 = points;
	if (_p16.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$MoveTo(_p16._0),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (point) {
					return _hannemathisen$elm_test_project$Canvas$LineTo(point);
				},
				_p16._1));
	}
};
var _hannemathisen$elm_test_project$DrawErase_State$update = F2(
	function (msg, model) {
		var _p17 = msg;
		switch (_p17.ctor) {
			case 'MouseDown':
				var _p18 = model.mode;
				if (_p18.ctor === 'Erase') {
					var x = _elm_lang$core$List$head(model.drawData.previousDrawnPoints);
					var _p19 = x;
					if (_p19.ctor === 'Nothing') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: true}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						if (_elm_lang$core$Native_Utils.eq(model.drawData.drawnPoints, _p19._0)) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{draw: true}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							var drawData = model.drawData;
							var newDrawData = _elm_lang$core$Native_Utils.update(
								drawData,
								{
									previousDrawnPoints: {ctor: '::', _0: model.drawData.drawnPoints, _1: model.drawData.previousDrawnPoints}
								});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{draw: true, drawData: newDrawData}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: true}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'MouseUp':
				var _p20 = model.mode;
				if (_p20.ctor === 'Draw') {
					var x = _elm_lang$core$List$head(model.drawData.previousDrawnPoints);
					var _p21 = x;
					if (_p21.ctor === 'Nothing') {
						var newcurrentPoints = {ctor: '[]'};
						var drawData = model.drawData;
						var newDrawData = _elm_lang$core$Native_Utils.update(
							drawData,
							{
								drawnPoints: {ctor: '::', _0: model.drawData.currentPoints, _1: model.drawData.drawnPoints},
								currentPoints: newcurrentPoints,
								previousDrawnPoints: {ctor: '::', _0: model.drawData.drawnPoints, _1: model.drawData.previousDrawnPoints}
							});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false, drawData: newDrawData}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						if (_elm_lang$core$Native_Utils.eq(model.drawData.drawnPoints, _p21._0)) {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{draw: false}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							var newcurrentPoints = {ctor: '[]'};
							var drawData = model.drawData;
							var newDrawData = _elm_lang$core$Native_Utils.update(
								drawData,
								{
									drawnPoints: {ctor: '::', _0: model.drawData.currentPoints, _1: model.drawData.drawnPoints},
									currentPoints: newcurrentPoints,
									previousDrawnPoints: {ctor: '::', _0: model.drawData.drawnPoints, _1: model.drawData.previousDrawnPoints}
								});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{draw: false, drawData: newDrawData}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: false}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'MouseMove':
				var _p24 = _p17._0;
				var _p22 = model.mode;
				if (_p22.ctor === 'Draw') {
					var _p23 = model.draw;
					if (_p23 === true) {
						var drawData = model.drawData;
						var newPoints = A2(
							_elm_lang$core$Basics_ops['++'],
							model.drawData.currentPoints,
							{
								ctor: '::',
								_0: _p24,
								_1: {ctor: '[]'}
							});
						var lineDrawOps = _elm_lang$core$List$concat(
							A2(
								_elm_lang$core$List$map,
								function (newPoints) {
									return _hannemathisen$elm_test_project$DrawErase_State$pointsToLineOperations(newPoints);
								},
								{ctor: '::', _0: newPoints, _1: model.drawData.drawnPoints}));
						var newDrawOps = _hannemathisen$elm_test_project$DrawErase_State$concatDrawOps(lineDrawOps);
						var newDrawData = _elm_lang$core$Native_Utils.update(
							drawData,
							{currentPoints: newPoints, drawOps: newDrawOps});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{drawData: newDrawData}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				} else {
					var drawData = model.drawData;
					var newPoints = A2(_hannemathisen$elm_test_project$DrawErase_State$erase, _p24, drawData.drawnPoints);
					var lineDrawOps = _elm_lang$core$List$concat(
						A2(
							_elm_lang$core$List$map,
							function (newPoints) {
								return _hannemathisen$elm_test_project$DrawErase_State$pointsToLineOperations(newPoints);
							},
							newPoints));
					var newDrawOps = _hannemathisen$elm_test_project$DrawErase_State$concatDrawOps(lineDrawOps);
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{drawnPoints: newPoints, drawOps: newDrawOps});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TouchDown':
				var _p25 = _p17._0.points;
				if (_p25.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var _p26 = model.mode;
					if (_p26.ctor === 'Draw') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: true}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						var x = _elm_lang$core$List$head(model.drawData.previousDrawnPoints);
						var _p27 = x;
						if (_p27.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{draw: true}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							if (_elm_lang$core$Native_Utils.eq(model.drawData.drawnPoints, _p27._0)) {
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{draw: true}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								var drawData = model.drawData;
								var newDrawData = _elm_lang$core$Native_Utils.update(
									drawData,
									{
										previousDrawnPoints: {ctor: '::', _0: model.drawData.drawnPoints, _1: model.drawData.previousDrawnPoints}
									});
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{draw: true, drawData: newDrawData}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							}
						}
					}
				}
			case 'TouchUp':
				var _p28 = _p17._0.points;
				if (_p28.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (_p28._1.ctor === '[]') {
						var _p29 = model.mode;
						if (_p29.ctor === 'Draw') {
							var x = _elm_lang$core$List$head(model.drawData.previousDrawnPoints);
							var _p30 = x;
							if (_p30.ctor === 'Nothing') {
								var newcurrentPoints = {ctor: '[]'};
								var drawData = model.drawData;
								var newDrawData = _elm_lang$core$Native_Utils.update(
									drawData,
									{
										drawnPoints: {ctor: '::', _0: model.drawData.currentPoints, _1: model.drawData.drawnPoints},
										currentPoints: newcurrentPoints,
										previousDrawnPoints: {ctor: '::', _0: model.drawData.drawnPoints, _1: model.drawData.previousDrawnPoints}
									});
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{draw: false, drawData: newDrawData}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							} else {
								if (_elm_lang$core$Native_Utils.eq(model.drawData.drawnPoints, _p30._0)) {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{draw: false}),
										_1: _elm_lang$core$Platform_Cmd$none
									};
								} else {
									var newcurrentPoints = {ctor: '[]'};
									var drawData = model.drawData;
									var newDrawData = _elm_lang$core$Native_Utils.update(
										drawData,
										{
											drawnPoints: {ctor: '::', _0: model.drawData.currentPoints, _1: model.drawData.drawnPoints},
											currentPoints: newcurrentPoints,
											previousDrawnPoints: {ctor: '::', _0: model.drawData.drawnPoints, _1: model.drawData.previousDrawnPoints}
										});
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											model,
											{draw: false, drawData: newDrawData}),
										_1: _elm_lang$core$Platform_Cmd$none
									};
								}
							}
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{draw: false}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'TouchMove':
				var _p31 = _p17._0.points;
				if (_p31.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (_p31._1.ctor === '[]') {
						var _p33 = _p31._0;
						var _p32 = model.mode;
						if (_p32.ctor === 'Draw') {
							var drawData = model.drawData;
							var newPoints = A2(
								_elm_lang$core$Basics_ops['++'],
								model.drawData.currentPoints,
								{
									ctor: '::',
									_0: _p33,
									_1: {ctor: '[]'}
								});
							var lineDrawOps = _elm_lang$core$List$concat(
								A2(
									_elm_lang$core$List$map,
									function (newPoints) {
										return _hannemathisen$elm_test_project$DrawErase_State$pointsToLineOperations(newPoints);
									},
									{ctor: '::', _0: newPoints, _1: model.drawData.drawnPoints}));
							var newDrawOps = _hannemathisen$elm_test_project$DrawErase_State$concatDrawOps(lineDrawOps);
							var newDrawData = _elm_lang$core$Native_Utils.update(
								drawData,
								{currentPoints: newPoints, drawOps: newDrawOps});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{drawData: newDrawData}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							var drawData = model.drawData;
							var newPoints = A2(_hannemathisen$elm_test_project$DrawErase_State$erase, _p33, drawData.drawnPoints);
							var lineDrawOps = _elm_lang$core$List$concat(
								A2(
									_elm_lang$core$List$map,
									function (newPoints) {
										return _hannemathisen$elm_test_project$DrawErase_State$pointsToLineOperations(newPoints);
									},
									newPoints));
							var newDrawOps = _hannemathisen$elm_test_project$DrawErase_State$concatDrawOps(lineDrawOps);
							var newDrawData = _elm_lang$core$Native_Utils.update(
								drawData,
								{drawnPoints: newPoints, drawOps: newDrawOps});
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{drawData: newDrawData}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'ClearClicked':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{drawData: _hannemathisen$elm_test_project$DrawErase_Types$initDrawData, mode: _hannemathisen$elm_test_project$DrawErase_Types$Draw}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'UndoClicked':
				var _p34 = model.drawData.previousDrawnPoints;
				if (_p34.ctor === '[]') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$DrawErase_Types$Draw}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					var _p35 = _p34._0;
					var lineDrawOps = _elm_lang$core$List$concat(
						A2(
							_elm_lang$core$List$map,
							function (x) {
								return _hannemathisen$elm_test_project$DrawErase_State$pointsToLineOperations(x);
							},
							_p35));
					var newDrawOps = _hannemathisen$elm_test_project$DrawErase_State$concatDrawOps(lineDrawOps);
					var drawData = model.drawData;
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{drawnPoints: _p35, previousDrawnPoints: _p34._1, drawOps: newDrawOps});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			default:
				var _p36 = model.mode;
				if (_p36.ctor === 'Draw') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$DrawErase_Types$Erase}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{mode: _hannemathisen$elm_test_project$DrawErase_Types$Draw}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
		}
	});
var _hannemathisen$elm_test_project$DrawErase_State$init = function () {
	var model = {mode: _hannemathisen$elm_test_project$DrawErase_Types$Draw, drawData: _hannemathisen$elm_test_project$DrawErase_Types$initDrawData, draw: false, image: _hannemathisen$elm_test_project$DrawErase_Types$Loading};
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
}();
