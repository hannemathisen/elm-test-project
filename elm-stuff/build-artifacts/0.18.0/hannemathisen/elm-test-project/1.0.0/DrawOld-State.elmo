var _hannemathisen$elm_test_project$DrawOld_State$concatDrawOps = function (drawOps) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		{
			ctor: '::',
			_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
			_1: {
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$LineWidth(3),
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(_elm_lang$core$Color$red),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineCap('round'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$Stroke,
				_1: {ctor: '[]'}
			}));
};
var _hannemathisen$elm_test_project$DrawOld_State$pointsToLineOperations = function (points) {
	var _p0 = points;
	if (_p0.ctor === '[]') {
		return {ctor: '[]'};
	} else {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$MoveTo(_p0._0),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				function (point) {
					return _hannemathisen$elm_test_project$Canvas$LineTo(point);
				},
				_p0._1));
	}
};
var _hannemathisen$elm_test_project$DrawOld_State$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'MouseDown':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{draw: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseUp':
				var newcurrentPoints = {ctor: '[]'};
				var drawData = model.drawData;
				var newDrawData = _elm_lang$core$Native_Utils.update(
					drawData,
					{
						drawnPoints: {ctor: '::', _0: model.drawData.currentPoints, _1: model.drawData.drawnPoints},
						currentPoints: newcurrentPoints
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{draw: false, drawData: newDrawData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseMove':
				var _p2 = model.draw;
				if (_p2 === true) {
					var drawData = model.drawData;
					var newPoints = A2(
						_elm_lang$core$Basics_ops['++'],
						model.drawData.currentPoints,
						{
							ctor: '::',
							_0: _p1._0,
							_1: {ctor: '[]'}
						});
					var lineDrawOps = _elm_lang$core$List$concat(
						A2(
							_elm_lang$core$List$map,
							function (newPoints) {
								return _hannemathisen$elm_test_project$DrawOld_State$pointsToLineOperations(newPoints);
							},
							{ctor: '::', _0: newPoints, _1: model.drawData.drawnPoints}));
					var newDrawOps = _hannemathisen$elm_test_project$DrawOld_State$concatDrawOps(lineDrawOps);
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{currentPoints: newPoints, drawOps: newDrawOps});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'TouchDown':
				var _p3 = _p1._0.points;
				if (_p3.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					var newcurrentPoints = A2(
						_elm_lang$core$Debug$log,
						'newcurrentPoints',
						{ctor: '[]'});
					var drawData = model.drawData;
					var newDrawData = _elm_lang$core$Native_Utils.update(
						drawData,
						{
							drawnPoints: A2(
								_elm_lang$core$Basics_ops['++'],
								model.drawData.drawnPoints,
								{
									ctor: '::',
									_0: model.drawData.currentPoints,
									_1: {ctor: '[]'}
								}),
							currentPoints: newcurrentPoints
						});
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{draw: true, drawData: newDrawData}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'TouchUp':
				var _p4 = _p1._0.points;
				if (_p4.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (_p4._1.ctor === '[]') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'TouchMove':
				var _p5 = _p1._0.points;
				if (_p5.ctor === '[]') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					if (_p5._1.ctor === '[]') {
						var drawData = model.drawData;
						var newPoints = A2(
							_elm_lang$core$Basics_ops['++'],
							model.drawData.currentPoints,
							{
								ctor: '::',
								_0: _p5._0,
								_1: {ctor: '[]'}
							});
						var lineDrawOps = _elm_lang$core$List$concat(
							A2(
								_elm_lang$core$List$map,
								function (newPoints) {
									return _hannemathisen$elm_test_project$DrawOld_State$pointsToLineOperations(newPoints);
								},
								{ctor: '::', _0: newPoints, _1: model.drawData.drawnPoints}));
						var newDrawOps = _hannemathisen$elm_test_project$DrawOld_State$concatDrawOps(lineDrawOps);
						var newDrawData = _elm_lang$core$Native_Utils.update(
							drawData,
							{currentPoints: newPoints, drawOps: newDrawOps});
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{drawData: newDrawData}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{draw: false}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				}
			case 'ClearClicked':
				var drawData = model.drawData;
				var newDrawOps = {ctor: '[]'};
				var newPoints = {ctor: '[]'};
				var newDrawData = _elm_lang$core$Native_Utils.update(
					drawData,
					{drawnPoints: newPoints, drawOps: newDrawOps});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{drawData: newDrawData}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _hannemathisen$elm_test_project$DrawOld_State$init = function () {
	var model = {drawData: _hannemathisen$elm_test_project$DrawOld_Types$initDrawData, draw: false, image: _hannemathisen$elm_test_project$DrawOld_Types$Loading};
	return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
}();
