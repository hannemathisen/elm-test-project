var _hannemathisen$elm_test_project$DrawErase_View$drawCanvas = F2(
	function (drawOps, canvas) {
		var drawOpsWithBorder = A2(
			_elm_lang$core$List$append,
			drawOps,
			{
				ctor: '::',
				_0: _hannemathisen$elm_test_project$Canvas$BeginPath,
				_1: {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas$StrokeStyle(
						A3(_elm_lang$core$Color$rgb, 255, 0, 0)),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas$LineWidth(2.0),
						_1: {
							ctor: '::',
							_0: A2(
								_hannemathisen$elm_test_project$Canvas$Rect,
								_hannemathisen$elm_test_project$Canvas_Point$fromInts(
									{ctor: '_Tuple2', _0: 0, _1: 0}),
								A2(_hannemathisen$elm_test_project$Canvas$Size, 800, 600)),
							_1: {
								ctor: '::',
								_0: _hannemathisen$elm_test_project$Canvas$Stroke,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
		var _p0 = _hannemathisen$elm_test_project$Canvas$getSize(canvas);
		var width = _p0.width;
		var height = _p0.height;
		return A2(_hannemathisen$elm_test_project$Canvas$batch, drawOpsWithBorder, canvas);
	});
var _hannemathisen$elm_test_project$DrawErase_View$presentIfReady = function (model) {
	var _p1 = model.image;
	if (_p1.ctor === 'Loading') {
		return A2(
			_elm_lang$html$Html$p,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Loading image...'),
				_1: {ctor: '[]'}
			});
	} else {
		var touchOptions = {stopPropagation: true, preventDefault: true};
		var events = function () {
			var _p2 = model.draw;
			if (_p2 === true) {
				return {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseUp(_hannemathisen$elm_test_project$DrawErase_Types$MouseUp),
					_1: {
						ctor: '::',
						_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseMove(_hannemathisen$elm_test_project$DrawErase_Types$MouseMove),
						_1: {
							ctor: '::',
							_0: A2(_hannemathisen$elm_test_project$Canvas_Events$onMultiTouchMove, touchOptions, _hannemathisen$elm_test_project$DrawErase_Types$TouchMove),
							_1: {
								ctor: '::',
								_0: A2(_hannemathisen$elm_test_project$Canvas_Events$onMultiTouchEnd, touchOptions, _hannemathisen$elm_test_project$DrawErase_Types$TouchUp),
								_1: {
									ctor: '::',
									_0: A2(_hannemathisen$elm_test_project$Canvas_Events$onMultiTouchCancel, touchOptions, _hannemathisen$elm_test_project$DrawErase_Types$TouchUp),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				};
			} else {
				return {
					ctor: '::',
					_0: _hannemathisen$elm_test_project$Canvas_Events$onMouseDown(_hannemathisen$elm_test_project$DrawErase_Types$MouseDown),
					_1: {
						ctor: '::',
						_0: A2(_hannemathisen$elm_test_project$Canvas_Events$onMultiTouchStart, touchOptions, _hannemathisen$elm_test_project$DrawErase_Types$TouchDown),
						_1: {ctor: '[]'}
					}
				};
			}
		}();
		var allEvents = _elm_lang$core$Native_Utils.eq(model.mode, _hannemathisen$elm_test_project$DrawErase_Types$Erase) ? A2(
			_elm_lang$core$Basics_ops['++'],
			events,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('add-eraser'),
				_1: {ctor: '[]'}
			}) : events;
		return A2(
			_hannemathisen$elm_test_project$Canvas$toHtml,
			allEvents,
			A2(_hannemathisen$elm_test_project$DrawErase_View$drawCanvas, model.drawData.drawOps, _p1._0));
	}
};
var _hannemathisen$elm_test_project$DrawErase_View$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _hannemathisen$elm_test_project$DrawErase_View$presentIfReady(model),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$button,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('btn'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_hannemathisen$elm_test_project$DrawErase_Types$EraseClicked),
									_1: {ctor: '[]'}
								}
							},
							{
								ctor: '::',
								_0: function () {
									var _p3 = model.mode;
									if (_p3.ctor === 'Draw') {
										return _elm_lang$html$Html$text('Erase is off');
									} else {
										return _elm_lang$html$Html$text('Erase is on');
									}
								}(),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('btn'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_hannemathisen$elm_test_project$DrawErase_Types$UndoClicked),
										_1: {ctor: '[]'}
									}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Undo'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('btn'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(_hannemathisen$elm_test_project$DrawErase_Types$ClearClicked),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Clear'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
